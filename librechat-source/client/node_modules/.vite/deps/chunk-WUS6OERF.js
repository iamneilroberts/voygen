import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  require_sha,
  require_to_buffer
} from "./chunk-GWFXPLDF.js";
import {
  require_inherits_browser,
  require_stream_browserify
} from "./chunk-GYXBWJRB.js";
import {
  require_safe_buffer
} from "./chunk-KNAGWG4M.js";
import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-XN4GCD7D.js";

// ../node_modules/pbkdf2/lib/precondition.js
var require_precondition = __commonJS({
  "../node_modules/pbkdf2/lib/precondition.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var MAX_ALLOC = Math.pow(2, 30) - 1;
    module.exports = function(iterations, keylen) {
      if (typeof iterations !== "number") {
        throw new TypeError("Iterations not a number");
      }
      if (iterations < 0) {
        throw new TypeError("Bad iterations");
      }
      if (typeof keylen !== "number") {
        throw new TypeError("Key length not a number");
      }
      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        throw new TypeError("Bad key length");
      }
    };
  }
});

// ../node_modules/pbkdf2/lib/default-encoding.js
var require_default_encoding = __commonJS({
  "../node_modules/pbkdf2/lib/default-encoding.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var defaultEncoding;
    if (global.process && global.process.browser) {
      defaultEncoding = "utf-8";
    } else if (global.process && global.process.version) {
      pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
      defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
    } else {
      defaultEncoding = "utf-8";
    }
    var pVersionMajor;
    module.exports = defaultEncoding;
  }
});

// ../node_modules/pbkdf2/node_modules/create-hash/make-hash.js
var require_make_hash = __commonJS({
  "../node_modules/pbkdf2/node_modules/create-hash/make-hash.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var intSize = 4;
    var zeroBuffer = new Buffer(intSize);
    zeroBuffer.fill(0);
    var charSize = 8;
    var hashSize = 16;
    function toArray(buf) {
      if (buf.length % intSize !== 0) {
        var len = buf.length + (intSize - buf.length % intSize);
        buf = Buffer.concat([buf, zeroBuffer], len);
      }
      var arr = new Array(buf.length >>> 2);
      for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {
        arr[j] = buf.readInt32LE(i);
      }
      return arr;
    }
    module.exports = function hash(buf, fn) {
      var arr = fn(toArray(buf), buf.length * charSize);
      buf = new Buffer(hashSize);
      for (var i = 0; i < arr.length; i++) {
        buf.writeInt32LE(arr[i], i << 2, true);
      }
      return buf;
    };
  }
});

// ../node_modules/pbkdf2/node_modules/create-hash/md5.js
var require_md5 = __commonJS({
  "../node_modules/pbkdf2/node_modules/create-hash/md5.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var makeHash = require_make_hash();
    function core_md5(x, len) {
      x[len >> 5] |= 128 << len % 32;
      x[(len + 64 >>> 9 << 4) + 14] = len;
      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;
      for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
      }
      return [a, b, c, d];
    }
    function md5_cmn(q, a, b, x, s, t) {
      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
    }
    function md5_ff(a, b, c, d, x, s, t) {
      return md5_cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t) {
      return md5_cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t) {
      return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t) {
      return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    function safe_add(x, y) {
      var lsw = (x & 65535) + (y & 65535);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bit_rol(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    module.exports = function md5(buf) {
      return makeHash(buf, core_md5);
    };
  }
});

// ../node_modules/pbkdf2/node_modules/hash-base/index.js
var require_hash_base = __commonJS({
  "../node_modules/pbkdf2/node_modules/hash-base/index.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var Transform = require_stream_browserify().Transform;
    var inherits = require_inherits_browser();
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = new Buffer(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        if (encoding !== "buffer") chunk = new Buffer(chunk, encoding);
        this.update(chunk);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this._digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      if (!Buffer.isBuffer(data) && typeof data !== "string") throw new TypeError("Data must be a string or a buffer");
      if (this._finalized) throw new Error("Digest already called");
      if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || "binary");
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function(data) {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0) digest = digest.toString(encoding);
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module.exports = HashBase;
  }
});

// ../node_modules/pbkdf2/node_modules/ripemd160/index.js
var require_ripemd160 = __commonJS({
  "../node_modules/pbkdf2/node_modules/ripemd160/index.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var HashBase = require_hash_base();
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var m = new Array(16);
      for (var i = 0; i < 16; ++i) m[i] = this._block.readInt32LE(i * 4);
      var al = this._a;
      var bl = this._b;
      var cl = this._c;
      var dl = this._d;
      var el = this._e;
      al = fn1(al, bl, cl, dl, el, m[0], 0, 11);
      cl = rotl(cl, 10);
      el = fn1(el, al, bl, cl, dl, m[1], 0, 14);
      bl = rotl(bl, 10);
      dl = fn1(dl, el, al, bl, cl, m[2], 0, 15);
      al = rotl(al, 10);
      cl = fn1(cl, dl, el, al, bl, m[3], 0, 12);
      el = rotl(el, 10);
      bl = fn1(bl, cl, dl, el, al, m[4], 0, 5);
      dl = rotl(dl, 10);
      al = fn1(al, bl, cl, dl, el, m[5], 0, 8);
      cl = rotl(cl, 10);
      el = fn1(el, al, bl, cl, dl, m[6], 0, 7);
      bl = rotl(bl, 10);
      dl = fn1(dl, el, al, bl, cl, m[7], 0, 9);
      al = rotl(al, 10);
      cl = fn1(cl, dl, el, al, bl, m[8], 0, 11);
      el = rotl(el, 10);
      bl = fn1(bl, cl, dl, el, al, m[9], 0, 13);
      dl = rotl(dl, 10);
      al = fn1(al, bl, cl, dl, el, m[10], 0, 14);
      cl = rotl(cl, 10);
      el = fn1(el, al, bl, cl, dl, m[11], 0, 15);
      bl = rotl(bl, 10);
      dl = fn1(dl, el, al, bl, cl, m[12], 0, 6);
      al = rotl(al, 10);
      cl = fn1(cl, dl, el, al, bl, m[13], 0, 7);
      el = rotl(el, 10);
      bl = fn1(bl, cl, dl, el, al, m[14], 0, 9);
      dl = rotl(dl, 10);
      al = fn1(al, bl, cl, dl, el, m[15], 0, 8);
      cl = rotl(cl, 10);
      el = fn2(el, al, bl, cl, dl, m[7], 1518500249, 7);
      bl = rotl(bl, 10);
      dl = fn2(dl, el, al, bl, cl, m[4], 1518500249, 6);
      al = rotl(al, 10);
      cl = fn2(cl, dl, el, al, bl, m[13], 1518500249, 8);
      el = rotl(el, 10);
      bl = fn2(bl, cl, dl, el, al, m[1], 1518500249, 13);
      dl = rotl(dl, 10);
      al = fn2(al, bl, cl, dl, el, m[10], 1518500249, 11);
      cl = rotl(cl, 10);
      el = fn2(el, al, bl, cl, dl, m[6], 1518500249, 9);
      bl = rotl(bl, 10);
      dl = fn2(dl, el, al, bl, cl, m[15], 1518500249, 7);
      al = rotl(al, 10);
      cl = fn2(cl, dl, el, al, bl, m[3], 1518500249, 15);
      el = rotl(el, 10);
      bl = fn2(bl, cl, dl, el, al, m[12], 1518500249, 7);
      dl = rotl(dl, 10);
      al = fn2(al, bl, cl, dl, el, m[0], 1518500249, 12);
      cl = rotl(cl, 10);
      el = fn2(el, al, bl, cl, dl, m[9], 1518500249, 15);
      bl = rotl(bl, 10);
      dl = fn2(dl, el, al, bl, cl, m[5], 1518500249, 9);
      al = rotl(al, 10);
      cl = fn2(cl, dl, el, al, bl, m[2], 1518500249, 11);
      el = rotl(el, 10);
      bl = fn2(bl, cl, dl, el, al, m[14], 1518500249, 7);
      dl = rotl(dl, 10);
      al = fn2(al, bl, cl, dl, el, m[11], 1518500249, 13);
      cl = rotl(cl, 10);
      el = fn2(el, al, bl, cl, dl, m[8], 1518500249, 12);
      bl = rotl(bl, 10);
      dl = fn3(dl, el, al, bl, cl, m[3], 1859775393, 11);
      al = rotl(al, 10);
      cl = fn3(cl, dl, el, al, bl, m[10], 1859775393, 13);
      el = rotl(el, 10);
      bl = fn3(bl, cl, dl, el, al, m[14], 1859775393, 6);
      dl = rotl(dl, 10);
      al = fn3(al, bl, cl, dl, el, m[4], 1859775393, 7);
      cl = rotl(cl, 10);
      el = fn3(el, al, bl, cl, dl, m[9], 1859775393, 14);
      bl = rotl(bl, 10);
      dl = fn3(dl, el, al, bl, cl, m[15], 1859775393, 9);
      al = rotl(al, 10);
      cl = fn3(cl, dl, el, al, bl, m[8], 1859775393, 13);
      el = rotl(el, 10);
      bl = fn3(bl, cl, dl, el, al, m[1], 1859775393, 15);
      dl = rotl(dl, 10);
      al = fn3(al, bl, cl, dl, el, m[2], 1859775393, 14);
      cl = rotl(cl, 10);
      el = fn3(el, al, bl, cl, dl, m[7], 1859775393, 8);
      bl = rotl(bl, 10);
      dl = fn3(dl, el, al, bl, cl, m[0], 1859775393, 13);
      al = rotl(al, 10);
      cl = fn3(cl, dl, el, al, bl, m[6], 1859775393, 6);
      el = rotl(el, 10);
      bl = fn3(bl, cl, dl, el, al, m[13], 1859775393, 5);
      dl = rotl(dl, 10);
      al = fn3(al, bl, cl, dl, el, m[11], 1859775393, 12);
      cl = rotl(cl, 10);
      el = fn3(el, al, bl, cl, dl, m[5], 1859775393, 7);
      bl = rotl(bl, 10);
      dl = fn3(dl, el, al, bl, cl, m[12], 1859775393, 5);
      al = rotl(al, 10);
      cl = fn4(cl, dl, el, al, bl, m[1], 2400959708, 11);
      el = rotl(el, 10);
      bl = fn4(bl, cl, dl, el, al, m[9], 2400959708, 12);
      dl = rotl(dl, 10);
      al = fn4(al, bl, cl, dl, el, m[11], 2400959708, 14);
      cl = rotl(cl, 10);
      el = fn4(el, al, bl, cl, dl, m[10], 2400959708, 15);
      bl = rotl(bl, 10);
      dl = fn4(dl, el, al, bl, cl, m[0], 2400959708, 14);
      al = rotl(al, 10);
      cl = fn4(cl, dl, el, al, bl, m[8], 2400959708, 15);
      el = rotl(el, 10);
      bl = fn4(bl, cl, dl, el, al, m[12], 2400959708, 9);
      dl = rotl(dl, 10);
      al = fn4(al, bl, cl, dl, el, m[4], 2400959708, 8);
      cl = rotl(cl, 10);
      el = fn4(el, al, bl, cl, dl, m[13], 2400959708, 9);
      bl = rotl(bl, 10);
      dl = fn4(dl, el, al, bl, cl, m[3], 2400959708, 14);
      al = rotl(al, 10);
      cl = fn4(cl, dl, el, al, bl, m[7], 2400959708, 5);
      el = rotl(el, 10);
      bl = fn4(bl, cl, dl, el, al, m[15], 2400959708, 6);
      dl = rotl(dl, 10);
      al = fn4(al, bl, cl, dl, el, m[14], 2400959708, 8);
      cl = rotl(cl, 10);
      el = fn4(el, al, bl, cl, dl, m[5], 2400959708, 6);
      bl = rotl(bl, 10);
      dl = fn4(dl, el, al, bl, cl, m[6], 2400959708, 5);
      al = rotl(al, 10);
      cl = fn4(cl, dl, el, al, bl, m[2], 2400959708, 12);
      el = rotl(el, 10);
      bl = fn5(bl, cl, dl, el, al, m[4], 2840853838, 9);
      dl = rotl(dl, 10);
      al = fn5(al, bl, cl, dl, el, m[0], 2840853838, 15);
      cl = rotl(cl, 10);
      el = fn5(el, al, bl, cl, dl, m[5], 2840853838, 5);
      bl = rotl(bl, 10);
      dl = fn5(dl, el, al, bl, cl, m[9], 2840853838, 11);
      al = rotl(al, 10);
      cl = fn5(cl, dl, el, al, bl, m[7], 2840853838, 6);
      el = rotl(el, 10);
      bl = fn5(bl, cl, dl, el, al, m[12], 2840853838, 8);
      dl = rotl(dl, 10);
      al = fn5(al, bl, cl, dl, el, m[2], 2840853838, 13);
      cl = rotl(cl, 10);
      el = fn5(el, al, bl, cl, dl, m[10], 2840853838, 12);
      bl = rotl(bl, 10);
      dl = fn5(dl, el, al, bl, cl, m[14], 2840853838, 5);
      al = rotl(al, 10);
      cl = fn5(cl, dl, el, al, bl, m[1], 2840853838, 12);
      el = rotl(el, 10);
      bl = fn5(bl, cl, dl, el, al, m[3], 2840853838, 13);
      dl = rotl(dl, 10);
      al = fn5(al, bl, cl, dl, el, m[8], 2840853838, 14);
      cl = rotl(cl, 10);
      el = fn5(el, al, bl, cl, dl, m[11], 2840853838, 11);
      bl = rotl(bl, 10);
      dl = fn5(dl, el, al, bl, cl, m[6], 2840853838, 8);
      al = rotl(al, 10);
      cl = fn5(cl, dl, el, al, bl, m[15], 2840853838, 5);
      el = rotl(el, 10);
      bl = fn5(bl, cl, dl, el, al, m[13], 2840853838, 6);
      dl = rotl(dl, 10);
      var ar = this._a;
      var br = this._b;
      var cr = this._c;
      var dr = this._d;
      var er = this._e;
      ar = fn5(ar, br, cr, dr, er, m[5], 1352829926, 8);
      cr = rotl(cr, 10);
      er = fn5(er, ar, br, cr, dr, m[14], 1352829926, 9);
      br = rotl(br, 10);
      dr = fn5(dr, er, ar, br, cr, m[7], 1352829926, 9);
      ar = rotl(ar, 10);
      cr = fn5(cr, dr, er, ar, br, m[0], 1352829926, 11);
      er = rotl(er, 10);
      br = fn5(br, cr, dr, er, ar, m[9], 1352829926, 13);
      dr = rotl(dr, 10);
      ar = fn5(ar, br, cr, dr, er, m[2], 1352829926, 15);
      cr = rotl(cr, 10);
      er = fn5(er, ar, br, cr, dr, m[11], 1352829926, 15);
      br = rotl(br, 10);
      dr = fn5(dr, er, ar, br, cr, m[4], 1352829926, 5);
      ar = rotl(ar, 10);
      cr = fn5(cr, dr, er, ar, br, m[13], 1352829926, 7);
      er = rotl(er, 10);
      br = fn5(br, cr, dr, er, ar, m[6], 1352829926, 7);
      dr = rotl(dr, 10);
      ar = fn5(ar, br, cr, dr, er, m[15], 1352829926, 8);
      cr = rotl(cr, 10);
      er = fn5(er, ar, br, cr, dr, m[8], 1352829926, 11);
      br = rotl(br, 10);
      dr = fn5(dr, er, ar, br, cr, m[1], 1352829926, 14);
      ar = rotl(ar, 10);
      cr = fn5(cr, dr, er, ar, br, m[10], 1352829926, 14);
      er = rotl(er, 10);
      br = fn5(br, cr, dr, er, ar, m[3], 1352829926, 12);
      dr = rotl(dr, 10);
      ar = fn5(ar, br, cr, dr, er, m[12], 1352829926, 6);
      cr = rotl(cr, 10);
      er = fn4(er, ar, br, cr, dr, m[6], 1548603684, 9);
      br = rotl(br, 10);
      dr = fn4(dr, er, ar, br, cr, m[11], 1548603684, 13);
      ar = rotl(ar, 10);
      cr = fn4(cr, dr, er, ar, br, m[3], 1548603684, 15);
      er = rotl(er, 10);
      br = fn4(br, cr, dr, er, ar, m[7], 1548603684, 7);
      dr = rotl(dr, 10);
      ar = fn4(ar, br, cr, dr, er, m[0], 1548603684, 12);
      cr = rotl(cr, 10);
      er = fn4(er, ar, br, cr, dr, m[13], 1548603684, 8);
      br = rotl(br, 10);
      dr = fn4(dr, er, ar, br, cr, m[5], 1548603684, 9);
      ar = rotl(ar, 10);
      cr = fn4(cr, dr, er, ar, br, m[10], 1548603684, 11);
      er = rotl(er, 10);
      br = fn4(br, cr, dr, er, ar, m[14], 1548603684, 7);
      dr = rotl(dr, 10);
      ar = fn4(ar, br, cr, dr, er, m[15], 1548603684, 7);
      cr = rotl(cr, 10);
      er = fn4(er, ar, br, cr, dr, m[8], 1548603684, 12);
      br = rotl(br, 10);
      dr = fn4(dr, er, ar, br, cr, m[12], 1548603684, 7);
      ar = rotl(ar, 10);
      cr = fn4(cr, dr, er, ar, br, m[4], 1548603684, 6);
      er = rotl(er, 10);
      br = fn4(br, cr, dr, er, ar, m[9], 1548603684, 15);
      dr = rotl(dr, 10);
      ar = fn4(ar, br, cr, dr, er, m[1], 1548603684, 13);
      cr = rotl(cr, 10);
      er = fn4(er, ar, br, cr, dr, m[2], 1548603684, 11);
      br = rotl(br, 10);
      dr = fn3(dr, er, ar, br, cr, m[15], 1836072691, 9);
      ar = rotl(ar, 10);
      cr = fn3(cr, dr, er, ar, br, m[5], 1836072691, 7);
      er = rotl(er, 10);
      br = fn3(br, cr, dr, er, ar, m[1], 1836072691, 15);
      dr = rotl(dr, 10);
      ar = fn3(ar, br, cr, dr, er, m[3], 1836072691, 11);
      cr = rotl(cr, 10);
      er = fn3(er, ar, br, cr, dr, m[7], 1836072691, 8);
      br = rotl(br, 10);
      dr = fn3(dr, er, ar, br, cr, m[14], 1836072691, 6);
      ar = rotl(ar, 10);
      cr = fn3(cr, dr, er, ar, br, m[6], 1836072691, 6);
      er = rotl(er, 10);
      br = fn3(br, cr, dr, er, ar, m[9], 1836072691, 14);
      dr = rotl(dr, 10);
      ar = fn3(ar, br, cr, dr, er, m[11], 1836072691, 12);
      cr = rotl(cr, 10);
      er = fn3(er, ar, br, cr, dr, m[8], 1836072691, 13);
      br = rotl(br, 10);
      dr = fn3(dr, er, ar, br, cr, m[12], 1836072691, 5);
      ar = rotl(ar, 10);
      cr = fn3(cr, dr, er, ar, br, m[2], 1836072691, 14);
      er = rotl(er, 10);
      br = fn3(br, cr, dr, er, ar, m[10], 1836072691, 13);
      dr = rotl(dr, 10);
      ar = fn3(ar, br, cr, dr, er, m[0], 1836072691, 13);
      cr = rotl(cr, 10);
      er = fn3(er, ar, br, cr, dr, m[4], 1836072691, 7);
      br = rotl(br, 10);
      dr = fn3(dr, er, ar, br, cr, m[13], 1836072691, 5);
      ar = rotl(ar, 10);
      cr = fn2(cr, dr, er, ar, br, m[8], 2053994217, 15);
      er = rotl(er, 10);
      br = fn2(br, cr, dr, er, ar, m[6], 2053994217, 5);
      dr = rotl(dr, 10);
      ar = fn2(ar, br, cr, dr, er, m[4], 2053994217, 8);
      cr = rotl(cr, 10);
      er = fn2(er, ar, br, cr, dr, m[1], 2053994217, 11);
      br = rotl(br, 10);
      dr = fn2(dr, er, ar, br, cr, m[3], 2053994217, 14);
      ar = rotl(ar, 10);
      cr = fn2(cr, dr, er, ar, br, m[11], 2053994217, 14);
      er = rotl(er, 10);
      br = fn2(br, cr, dr, er, ar, m[15], 2053994217, 6);
      dr = rotl(dr, 10);
      ar = fn2(ar, br, cr, dr, er, m[0], 2053994217, 14);
      cr = rotl(cr, 10);
      er = fn2(er, ar, br, cr, dr, m[5], 2053994217, 6);
      br = rotl(br, 10);
      dr = fn2(dr, er, ar, br, cr, m[12], 2053994217, 9);
      ar = rotl(ar, 10);
      cr = fn2(cr, dr, er, ar, br, m[2], 2053994217, 12);
      er = rotl(er, 10);
      br = fn2(br, cr, dr, er, ar, m[13], 2053994217, 9);
      dr = rotl(dr, 10);
      ar = fn2(ar, br, cr, dr, er, m[9], 2053994217, 12);
      cr = rotl(cr, 10);
      er = fn2(er, ar, br, cr, dr, m[7], 2053994217, 5);
      br = rotl(br, 10);
      dr = fn2(dr, er, ar, br, cr, m[10], 2053994217, 15);
      ar = rotl(ar, 10);
      cr = fn2(cr, dr, er, ar, br, m[14], 2053994217, 8);
      er = rotl(er, 10);
      br = fn1(br, cr, dr, er, ar, m[12], 0, 8);
      dr = rotl(dr, 10);
      ar = fn1(ar, br, cr, dr, er, m[15], 0, 5);
      cr = rotl(cr, 10);
      er = fn1(er, ar, br, cr, dr, m[10], 0, 12);
      br = rotl(br, 10);
      dr = fn1(dr, er, ar, br, cr, m[4], 0, 9);
      ar = rotl(ar, 10);
      cr = fn1(cr, dr, er, ar, br, m[1], 0, 12);
      er = rotl(er, 10);
      br = fn1(br, cr, dr, er, ar, m[5], 0, 5);
      dr = rotl(dr, 10);
      ar = fn1(ar, br, cr, dr, er, m[8], 0, 14);
      cr = rotl(cr, 10);
      er = fn1(er, ar, br, cr, dr, m[7], 0, 6);
      br = rotl(br, 10);
      dr = fn1(dr, er, ar, br, cr, m[6], 0, 8);
      ar = rotl(ar, 10);
      cr = fn1(cr, dr, er, ar, br, m[2], 0, 13);
      er = rotl(er, 10);
      br = fn1(br, cr, dr, er, ar, m[13], 0, 6);
      dr = rotl(dr, 10);
      ar = fn1(ar, br, cr, dr, er, m[14], 0, 5);
      cr = rotl(cr, 10);
      er = fn1(er, ar, br, cr, dr, m[0], 0, 15);
      br = rotl(br, 10);
      dr = fn1(dr, er, ar, br, cr, m[3], 0, 13);
      ar = rotl(ar, 10);
      cr = fn1(cr, dr, er, ar, br, m[9], 0, 11);
      er = rotl(er, 10);
      br = fn1(br, cr, dr, er, ar, m[11], 0, 11);
      dr = rotl(dr, 10);
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = new Buffer(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }
    module.exports = RIPEMD160;
  }
});

// ../node_modules/pbkdf2/lib/to-buffer.js
var require_to_buffer2 = __commonJS({
  "../node_modules/pbkdf2/lib/to-buffer.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var toBuffer = require_to_buffer();
    var useUint8Array = typeof Uint8Array !== "undefined";
    var useArrayBuffer = useUint8Array && typeof ArrayBuffer !== "undefined";
    var isView = useArrayBuffer && ArrayBuffer.isView;
    module.exports = function(thing, encoding, name) {
      if (typeof thing === "string" || Buffer2.isBuffer(thing) || useUint8Array && thing instanceof Uint8Array || isView && isView(thing)) {
        return toBuffer(thing, encoding);
      }
      throw new TypeError(name + " must be a string, a Buffer, a Uint8Array, or a DataView");
    };
  }
});

// ../node_modules/pbkdf2/lib/sync-browser.js
var require_sync_browser = __commonJS({
  "../node_modules/pbkdf2/lib/sync-browser.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var md5 = require_md5();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha();
    var Buffer2 = require_safe_buffer().Buffer;
    var checkParameters = require_precondition();
    var defaultEncoding = require_default_encoding();
    var toBuffer = require_to_buffer2();
    var ZEROS = Buffer2.alloc(128);
    var sizes = {
      __proto__: null,
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      "sha512-256": 32,
      ripemd160: 20,
      rmd160: 20
    };
    var mapping = {
      __proto__: null,
      "sha-1": "sha1",
      "sha-224": "sha224",
      "sha-256": "sha256",
      "sha-384": "sha384",
      "sha-512": "sha512",
      "ripemd-160": "ripemd160"
    };
    function rmd160Func(data) {
      return new RIPEMD160().update(data).digest();
    }
    function getDigest(alg) {
      function shaFunc(data) {
        return sha(alg).update(data).digest();
      }
      if (alg === "rmd160" || alg === "ripemd160") {
        return rmd160Func;
      }
      if (alg === "md5") {
        return md5;
      }
      return shaFunc;
    }
    function Hmac(alg, key, saltLen) {
      var hash = getDigest(alg);
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      if (key.length > blocksize) {
        key = hash(key);
      } else if (key.length < blocksize) {
        key = Buffer2.concat([key, ZEROS], blocksize);
      }
      var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
      }
      var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash;
      this.size = sizes[alg];
    }
    Hmac.prototype.run = function(data, ipad) {
      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
      return this.hash(this.opad);
    };
    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen);
      password = toBuffer(password, defaultEncoding, "Password");
      salt = toBuffer(salt, defaultEncoding, "Salt");
      var lowerDigest = (digest || "sha1").toLowerCase();
      var mappedDigest = mapping[lowerDigest] || lowerDigest;
      var size = sizes[mappedDigest];
      if (typeof size !== "number" || !size) {
        throw new TypeError("Digest algorithm not supported: " + digest);
      }
      var hmac = new Hmac(mappedDigest, password, salt.length);
      var DK = Buffer2.allocUnsafe(keylen);
      var block1 = Buffer2.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = size;
      var l = Math.ceil(keylen / hLen);
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2);
          for (var k = 0; k < hLen; k++) {
            T[k] ^= U[k];
          }
        }
        T.copy(DK, destPos);
        destPos += hLen;
      }
      return DK;
    }
    module.exports = pbkdf2;
  }
});

// ../node_modules/pbkdf2/lib/async.js
var require_async = __commonJS({
  "../node_modules/pbkdf2/lib/async.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var checkParameters = require_precondition();
    var defaultEncoding = require_default_encoding();
    var sync = require_sync_browser();
    var toBuffer = require_to_buffer2();
    var ZERO_BUF;
    var subtle = global.crypto && global.crypto.subtle;
    var toBrowser = {
      sha: "SHA-1",
      "sha-1": "SHA-1",
      sha1: "SHA-1",
      sha256: "SHA-256",
      "sha-256": "SHA-256",
      sha384: "SHA-384",
      "sha-384": "SHA-384",
      "sha-512": "SHA-512",
      sha512: "SHA-512"
    };
    var checks = [];
    var nextTick;
    function getNextTick() {
      if (nextTick) {
        return nextTick;
      }
      if (global.process && global.process.nextTick) {
        nextTick = global.process.nextTick;
      } else if (global.queueMicrotask) {
        nextTick = global.queueMicrotask;
      } else if (global.setImmediate) {
        nextTick = global.setImmediate;
      } else {
        nextTick = global.setTimeout;
      }
      return nextTick;
    }
    function browserPbkdf2(password, salt, iterations, length, algo) {
      return subtle.importKey("raw", password, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(key) {
        return subtle.deriveBits({
          name: "PBKDF2",
          salt,
          iterations,
          hash: {
            name: algo
          }
        }, key, length << 3);
      }).then(function(res) {
        return Buffer2.from(res);
      });
    }
    function checkNative(algo) {
      if (global.process && !global.process.browser) {
        return Promise.resolve(false);
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false);
      }
      if (checks[algo] !== void 0) {
        return checks[algo];
      }
      ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(
        function() {
          return true;
        },
        function() {
          return false;
        }
      );
      checks[algo] = prom;
      return prom;
    }
    function resolvePromise(promise, callback) {
      promise.then(function(out) {
        getNextTick()(function() {
          callback(null, out);
        });
      }, function(e) {
        getNextTick()(function() {
          callback(e);
        });
      });
    }
    module.exports = function(password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === "function") {
        callback = digest;
        digest = void 0;
      }
      digest = digest || "sha1";
      var algo = toBrowser[digest.toLowerCase()];
      if (!algo || typeof global.Promise !== "function") {
        getNextTick()(function() {
          var out;
          try {
            out = sync(password, salt, iterations, keylen, digest);
          } catch (e) {
            callback(e);
            return;
          }
          callback(null, out);
        });
        return;
      }
      checkParameters(iterations, keylen);
      password = toBuffer(password, defaultEncoding, "Password");
      salt = toBuffer(salt, defaultEncoding, "Salt");
      if (typeof callback !== "function") {
        throw new Error("No callback provided to pbkdf2");
      }
      resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) {
          return browserPbkdf2(password, salt, iterations, keylen, algo);
        }
        return sync(password, salt, iterations, keylen, digest);
      }), callback);
    };
  }
});

// ../node_modules/pbkdf2/browser.js
var require_browser = __commonJS({
  "../node_modules/pbkdf2/browser.js"(exports) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    exports.pbkdf2 = require_async();
    exports.pbkdf2Sync = require_sync_browser();
  }
});

export {
  require_browser
};
//# sourceMappingURL=chunk-WUS6OERF.js.map
